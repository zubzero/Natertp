var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FacebookOriginal = /** @class */ (function (_super) {
    __extends(FacebookOriginal, _super);
    function FacebookOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENTS = {
            EVENT_NAME_ACTIVATED_APP: 'fb_mobile_activate_app',
            EVENT_NAME_DEACTIVATED_APP: 'fb_mobile_deactivate_app',
            EVENT_NAME_SESSION_INTERRUPTIONS: 'fb_mobile_app_interruptions',
            EVENT_NAME_TIME_BETWEEN_SESSIONS: 'fb_mobile_time_between_sessions',
            EVENT_NAME_COMPLETED_REGISTRATION: 'fb_mobile_complete_registration',
            EVENT_NAME_VIEWED_CONTENT: 'fb_mobile_content_view',
            EVENT_NAME_SEARCHED: 'fb_mobile_search',
            EVENT_NAME_RATED: 'fb_mobile_rate',
            EVENT_NAME_COMPLETED_TUTORIAL: 'fb_mobile_tutorial_completion',
            EVENT_NAME_PUSH_TOKEN_OBTAINED: 'fb_mobile_obtain_push_token',
            EVENT_NAME_ADDED_TO_CART: 'fb_mobile_add_to_cart',
            EVENT_NAME_ADDED_TO_WISHLIST: 'fb_mobile_add_to_wishlist',
            EVENT_NAME_INITIATED_CHECKOUT: 'fb_mobile_initiated_checkout',
            EVENT_NAME_ADDED_PAYMENT_INFO: 'fb_mobile_add_payment_info',
            EVENT_NAME_PURCHASED: 'fb_mobile_purchase',
            EVENT_NAME_ACHIEVED_LEVEL: 'fb_mobile_level_achieved',
            EVENT_NAME_UNLOCKED_ACHIEVEMENT: 'fb_mobile_achievement_unlocked',
            EVENT_NAME_SPENT_CREDITS: 'fb_mobile_spent_credits',
            EVENT_PARAM_CURRENCY: 'fb_currency',
            EVENT_PARAM_REGISTRATION_METHOD: 'fb_registration_method',
            EVENT_PARAM_CONTENT_TYPE: 'fb_content_type',
            EVENT_PARAM_CONTENT_ID: 'fb_content_id',
            EVENT_PARAM_SEARCH_STRING: 'fb_search_string',
            EVENT_PARAM_SUCCESS: 'fb_success',
            EVENT_PARAM_MAX_RATING_VALUE: 'fb_max_rating_value',
            EVENT_PARAM_PAYMENT_INFO_AVAILABLE: 'fb_payment_info_available',
            EVENT_PARAM_NUM_ITEMS: 'fb_num_items',
            EVENT_PARAM_LEVEL: 'fb_level',
            EVENT_PARAM_DESCRIPTION: 'fb_description',
            EVENT_PARAM_SOURCE_APPLICATION: 'fb_mobile_launch_source',
            EVENT_PARAM_VALUE_YES: '1',
            EVENT_PARAM_VALUE_NO: '0'
        };
        return _this;
    }
    FacebookOriginal.prototype.login = function (permissions) { return cordova(this, "login", {}, arguments); };
    FacebookOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    FacebookOriginal.prototype.getLoginStatus = function () { return cordova(this, "getLoginStatus", {}, arguments); };
    FacebookOriginal.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    FacebookOriginal.prototype.showDialog = function (options) { return cordova(this, "showDialog", {}, arguments); };
    FacebookOriginal.prototype.api = function (requestPath, permissions) { return cordova(this, "api", {}, arguments); };
    FacebookOriginal.prototype.logEvent = function (name, params, valueToSum) { return cordova(this, "logEvent", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    FacebookOriginal.prototype.logPurchase = function (value, currency) { return cordova(this, "logPurchase", {}, arguments); };
    FacebookOriginal.prototype.getDeferredApplink = function () { return cordova(this, "getDeferredApplink", {}, arguments); };
    FacebookOriginal.pluginName = "Facebook";
    FacebookOriginal.plugin = "cordova-plugin-facebook4";
    FacebookOriginal.pluginRef = "facebookConnectPlugin";
    FacebookOriginal.repo = "https://github.com/jeduan/cordova-plugin-facebook4";
    FacebookOriginal.install = "ionic cordova plugin add cordova-plugin-facebook4 --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"";
    FacebookOriginal.installVariables = ["APP_ID", "APP_NAME"];
    FacebookOriginal.platforms = ["Android", "iOS", "Browser"];
    return FacebookOriginal;
}(IonicNativePlugin));
var Facebook = new FacebookOriginal();
export { Facebook };
//# sourceMappingURL=data:application/json;base64,